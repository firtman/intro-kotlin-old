{"pageProps":{"post":{"attributes":{},"html":"<p>With these libraries, fetching the data and parsing it is simple. But we have to find a solution to do this within composables. A composable should not have side effects inside, or should not be responsible for doing things like fetching data, so we will change our DataManager to conform to an Android architectural pattern: ViewModel.</p>\n<h2 id=\"creating-apikt\">Creating API.kt</h2>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CoffeeMastersApiService</span> </span>{\n    <span class=\"hljs-meta\">@GET(<span class=\"hljs-string\">&quot;menu.json&quot;</span>)</span>\n    <span class=\"hljs-keyword\">suspend</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">fetchMenu</span><span class=\"hljs-params\">()</span></span>: List&lt;Category&gt;\n}\n\n<span class=\"hljs-keyword\">object</span> API {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> retrofit: Retrofit = Retrofit.Builder()\n        .baseUrl(<span class=\"hljs-string\">&quot;https://firtman.github.io/coffeemasters/api/&quot;</span>)\n        .addConverterFactory(GsonConverterFactory.create())\n        .build()\n\n    <span class=\"hljs-keyword\">val</span> menuService: CoffeeMastersApiService <span class=\"hljs-keyword\">by</span> lazy {\n        retrofit.create(CoffeeMastersApiService::<span class=\"hljs-keyword\">class</span>.java)\n    }\n}\n</code></pre>\n<h2 id=\"change-the-signature-of-datamanager\">Change the signature of DataManager</h2>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DataManager</span></span>(app: Application) : AndroidViewModel(app)\n</code></pre>\n<h2 id=\"add-the-fetchdata-method\">Add the fetchData method</h2>\n<pre><code class=\"hljs language-kotlin\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">fetchData</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">try</span> {\n            viewModelScope.launch {\n                menu = API.menuService.fetchMenu()\n            }\n        } <span class=\"hljs-keyword\">catch</span> (ex: Exception) {\n            <span class=\"hljs-comment\">//<span class=\"hljs-doctag\">TODO:</span> create other state variable for error </span>\n        }\n    }\n\n    <span class=\"hljs-keyword\">init</span> {\n        fetchData()\n    }\n</code></pre>\n<h2 id=\"create-and-connect-the-datamanager-in-the-app\">Create and Connect the DataManager in the App</h2>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-comment\">// In the Activity</span>\n<span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(savedInstanceState: <span class=\"hljs-type\">Bundle</span>?)</span></span> {\n    <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState)\n    <span class=\"hljs-keyword\">var</span> dataManager = ViewModelProvider(<span class=\"hljs-keyword\">this</span>).<span class=\"hljs-keyword\">get</span>(DataManager::<span class=\"hljs-keyword\">class</span>.java)\n\n    setContent {\n        CoffeMastersDemoTheme {\n            <span class=\"hljs-comment\">// A surface container using the &#x27;background&#x27; color from the theme</span>\n            Surface(\n                modifier = Modifier.fillMaxSize(),\n                color = MaterialTheme.colors.background\n            ) {\n                App(dataManager)\n            }\n        }\n    }\n}\n</code></pre>\n<p>Receive the Data Manager in <code>App</code>, <code>MenuPage</code> and <code>OrderPage</code></p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">App</span><span class=\"hljs-params\">(dataManager: <span class=\"hljs-type\">DataManager</span>)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">MenuPage</span><span class=\"hljs-params\">(dataManager: <span class=\"hljs-type\">DataManager</span>)</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">OrderPage</span><span class=\"hljs-params\">(dataManager: <span class=\"hljs-type\">DataManager</span>)</span></span>\n</code></pre>\n<p>Pass the object from App</p>\n<pre><code class=\"hljs language-kotlin\"> <span class=\"hljs-keyword\">when</span> (selectedRoute.value) {\n    Routes.MenuPage.route -&gt; MenuPage(dataManager)\n    Routes.OffersPage.route -&gt; OffersPage()\n    Routes.OrderPage.route -&gt; OrderPage(dataManager)\n    Routes.InfoPage.route -&gt; InfoPage()\n}\n</code></pre>\n","slug":"requesting-data","title":"Requesting Data","section":"Using APIs and JSON","icon":"bridge","filePath":"/Users/firt/Library/Mobile Documents/com~apple~CloudDocs/Trainings/FEM/CompanionSite/intro-android/lessons/06-using-APIs-and-JSON/B-requesting-data.md","nextSlug":"/intro-android/lessons/using-APIs-and-JSON/finishing-the-menu","prevSlug":"/intro-android/lessons/using-APIs-and-JSON/adding-dependencies"}},"__N_SSG":true}